================================================================================
Changes since v18.01
================================================================================

--------------------------------------------------------------------------------
General framework-wide changes/improvements/trends/philosophy/goals

- Topic: Consistency in terminology with regard to represented Players discovered,
         created and/or managed by an interoperability interface.

  Within MIXR, different terms associated with interoperability discovered,
  created and/or managed players had been used.  For example, in some parts
  of the code, the term 'remote' player was used, in others, the terms 'networked',
  'interoperability' and even 'surrogate' can be found. To further complicate
  matters, the term 'ghost' is used in other simulation packages.
  Each use of these terms implies the same thing; a stand-in representation of
  a player being updated or managed by a different simulation (most likely executed
  on a different computer within a distributed environment).

  To improve the consistency of terminology throughout this code base, we have
  shifted references to this kind of stand-in representation, to a 'proxy' (or
  ProxyPlayer in code).  This proxy probably is being updated and/or managed,
  etc., by a 'remote' simulation, that is connected via a 'networked' interface,
  sharing data through an 'interoperability' protocol or mechanism, but in the end,
  it is a stand-in representation - not wholly or necessarily being updated or
  managed by this simulation process. We feel the term 'proxy' more fairly conveys
  what it is, as opposed to how it is comes about or where it comes from.

  We especially want to avoid using the term 'interoperability' player (or 'IPlayer'
  as abbreviated in code), as the 'I' is often stylistically, in code, used to
  imply interface, or more specifically an interface class (for player in this case).

  Moving to a consistent and more specific terminology, also communicates that a
  degree of uncertainty or difference (due to inconsistency of state and/or
  representation) between locally managed representations and stand-ins might exist.
  For example, from an analysis point of view, the outcomes (or results) from
  interactions between locally managed players and proxy players might be
  different than outcomes that do not include induced consistency or representation
  differences.

- Topic: String verses Identifier

  The Extensible Description Language (EDL) is enabled by a language parser
  and code embedded within Object-based classes.  Within it, two important data
  types, in this discussion, String and Identifier are of particular interest.

  Strings are defined in the language as quoted sequences of characters (e.g.,
  "Hello, World") as is common in many computer languages.  Identifiers are defined
  as an unquoted sequence of characters (e.g., 'blue', 'localhost', etc.). (Note: We
  use single quotes in the examples to indicate a particular character sequence for
  an Identifier; they are not to be used in an actual configuration file.)

  Identifiers, like most computer language are defined using one or more deemed
  valid characters that excludes spaces; they are most commonly used to label
  or name things such as objects and variables. In other words, they use a
  string-based value (i.e., name) to identify things!  In even other words, the
  value they provide indicate something to do (e.g., the type of scan to select).
  Within MIXR, although not enforced, stylistically, we prefer to make all
  identifiers lower case.  We believe this improves the readability of configuration
  input files by avoiding confusion with macros (which are often written in
  UPPER case).

  Even though both Identifiers and Strings are created and defined by a sequence
  of characters, they are distinguished by the role they play within the language.
  Under the hood, their value is stored as a string, but they serve different
  roles in terms of semantic meaning.  Identifiers can be viewed as value types
  that have internal meaning to the application, such as specifying a mode
  of some kind that maps to some enumeration.  Strings can be viewed as value
  types that have external meaning, for example, a description of something
  not terribly relevant to the executing application, or a filename or even
  a network address for which no unique data type (or token) has been
  defined.

  Internal to the EDL parser, they are distinguished using different tokens.  Within
  the C++ code base, they were somewhat confounded - namely, an Identifier was
  defined as a subclass to a String.  So, all Identifiers were considered Strings,
  even though their use and meaning is different.

  Change:

  The previous IS-A relationship within the C++ code base no longer exists;
  Identifiers and Strings are now entirely different types. From an
  implementation point of view, they both use a string to store a particular
  value; but they are now unrelated types. This had an impact on the code base,
  but interestingly enough, little, in fact, almost no impact on the configuration
  files.  Configuration files mostly specified types completely consistent with
  the EDL specification.  It was the C++ side, or Object-based classes that
  required some tweaking.

  In several cases, classes that defined slots to accept identifier-type value
  information (such as Antenna with its slot to define polarization as either
  'none', 'vertical', 'horizontal', 'slant', etc.) was in fact accepting a
  String to process the same input value.  This worked because of the previous
  IS-A relationship between the two; Identifier type value inputs would be accepted
  as a valid 'String', because they were related.

  We feel that the role of Identifiers and Strings are more easily understood
  without an IS-A relationship obfuscating it.  All classes have been updated to
  handle slot inputs more in-line with the value types they expect. Specific
  changes are listed within each library.

- Topic: Boolean verses Number

  The Extensible Description Language (EDL) is enabled by a language parser
  and code embedded within Object-based classes.  Within it, two important data
  types, in this discussion, Boolean and Number are of particular interest.

  Previously, within the C++ code base, the Boolean type (i.e., class) was defined
  as a subclass to Number (i.e., IS-A relationship).  This relationship allowed
  for Boolean's to be viewed substituted for any number, although they, as in many
  computer languages are considered to be  distinctly different types (e.g., C++
  'bool' vs 'int').

  Much like String and Identifiers, this can lead to some confusion.  For example,
  configuration files settings for things like an 'asynchronous' mode,
  (true/false type values) were being set to, say '5' - disturbing indeed.
  Unfortunately, this 'worked' -- '5' was being read as a number and interpreted
  as a positive value, thus 'true' was deemed its Boolean equivalent.

  To resolve any possible misunderstanding w


--------------------------------------------------------------------------------

#####################################################
Infrastructure oriented libraries
#####################################################

--------------------------------------------------------------------------------
base library (mixr_base)

- All addresses in network handler classes have been updated to type std::string
  as opposed to char*.  Also all of classes in which this matters that define a
  slot parameter for that address also accepts Identifiers to specific host
  names.  Strings are still used to specify IP addresses, so no native type exist
  for that.

   -------------------
   - Network classes -
   -------------------

   PosixHandler class
      1) Slot parameter 'localIpAddress' now accepts both a String for IP addresses
         (e.g., "127.0.0.1") and Identifiers for addresses specified as hostnames
         (e.g., 'localhost')
      2) Internally, 'localIpAddress' is now stored as a std::string
      3) Slot parameter 'shared' now accepts a Boolean

   TcpClient class
      1) Slot parameter 'ipAddress' now accepts both a String and Identifier with
         the same functionality as PosixHandler class changes
      2) Internally, 'ipAddress' is now stored as a std::string

   UdpBroadcastHandler class
      1) Internally, 'networkMask' is now being stored as a std::string
   
   UdpMulticastHandler class
      1) Internally, 'multicastGroup' is now being stored as a std::string
      2) Slot parameter 'loopback' now accepts a Boolean

   UdpUnicastHandler class
      1) Slot parameter 'ipAddress; now accepts both a String and Identifier with
         the same functionality as PosixHandler class changes
      2) Internally, ipAddr is now being stored as a std::string

   -------------------
   - Other classes -
   -------------------

   Boolean class
      1) This class has been refactored and it now based on Object.  It is
         no longer a subclass to Number.

   Component class
      1) Slot parameters 'enableTimingStats', 'printTimingStats', and
         'freeze' now accept a Boolean

   Identifier class
      1) This class is no longer a subclass of String.  It provides a complete
         interface to manage a string-based identifier.  Internally it uses
         a std::string to store this information.  It is subclassed off of
         Object to remain compatible with EDL parsing system.  It has also
         been marked as a 'final' class.

   Number class
      1) Methods associated with processing of Boolean values have been removed,
         please use the Boolean class instead

   String class
      1) No significant changes other than the removal of 'virtual' from several
         methods no longer used.

   Table class
      1) Slot parameter 'extrapolate' now accepts a Boolean

   Timer class
      1) Slot parameter 'active' now accepts a Boolean

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
recorder library (mixr_recorder)

   DataRecorder class
      1) Slot parameters 'eventName' and 'application' now accept an Identifier

   PrintSelected class
      1) Slot parameter 'timeOnly' now accepts a Boolean

   NetInput class
      1) Slot parameter 'noWait' now accepts a Boolean

   NetOutput class
      1) Slot parameter 'noWait' now accepts a Boolean

   TabPrinter class
      1) Slot parameter 'msgHdrOptn' now accepts an Identifier

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
terrain library (mixr_terrain)

   DtedFile class
      1) Slot parameter 'verifyChecksum' now accepts a Boolean

--------------------------------------------------------------------------------

#####################################################
Devices, I/O, controllers libraries
#####################################################

--------------------------------------------------------------------------------
linkage library (mixr_linkage)

   Ai2DiSwitch class
      1) Slot parameter 'inverted' now accepts a Boolean

   DiscreteInput class
      1) Slot parameter 'inverted' now accepts a Boolean

   DiscreteOutput class
      1) Slot parameter 'inverted' now accepts a Boolean

--------------------------------------------------------------------------------

#####################################################
Graphics oriented libraries
#####################################################

--------------------------------------------------------------------------------
graphics library (mixr_graphics)

   AbstractField class
      1) Slot parameter 'justification' now accepts an Identifier
      2) Slot parameter 'font' now accepts an Identifier
      3) Slot parameters 'highlight', 'underline', 'reversed', 'vertical,
         'brackets', 'linked' and 'inheritColor' now accepts a Boolean
   
   BitmapFont class
      1) Slot parameter 'reverse' now accepts a Boolean

   Display class
      1) Slot parameters for 'normalFont' and 'orientation' now accept and correctly
         process an Identifier
      2) Slot parameters for 'antiAliasing' and 'reverseVideoBrackets' now
         accept a Boolean

   Graphic class
      1) Even handler for 'onSetVisibilityEvent' now accepts a Boolean
      2) Slot parameters 'noDisplayList', 'subcomponentsFirst', 'stipple', 'visible'
         and 'mask' now accepts a Boolean


   NumericReadout class
      1) Slot parameter for 'blankIfZero' now accepts a Boolean

   MapPage class
      1) Event handler for 'onUpdateCentered' now accepts a Boolean
      2) Slot parameter 'centered' now accepts a Boolean
      3) Slot parameter 'northUp' now accepts a Boolean

   Page class
      1) Slot parameter for 'subpagesFirst' and 'focusSlavedToSubpage' now
         accepts a Boolean 

   Rotary2 class
      1) Event handler for 'onSelect' now accepts a Boolean

   Shape classes
      1) Slot parameter for 'filled' in Cirle class now accepts Boolean
      2) Slot parameter for 'connect' in Arc class now accepts Boolean
      3) Slot parameter for 'segment' in Line class now accepts Boolean
      4) Slot parameter for 'strip' in Quad class now accepts Boolean
      5) Slot parameter for 'fan' in Triangle class now accepts Boolean

   SymbolLoader class
      1) Slot parameters 'showOnlyInRange' and 'interconnect' now accept a
         Boolean


--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
instruments library (mixr_instruments)

   AnalogDial class
      1) Slot parameter 'mobile' now accepts a Boolean

   AnalogGauge class
      1) Slot parameters 'outlined' and 'vertical' now accepts a Boolean

   CompassRose class
      1) Event handler 'onUpdateCentered' now accepts a Boolean

   DialArcSegment class
      1) Slot parameters 'dynamic' and 'filled' now accepts a Boolean

   GhostHorizon class
      1) Slots for parameters 'skyColor' and 'groundColor' now accept an
         Identifier

   Knob class
      1) Slot for parameter 'endless' now accepts a Boolean

   Instrument class
      1) Slot parameter 'allowComponentPass' now accepts a Boolean

   PushButton class
      1) Slot parameters 'maintained' and 'startdepressed' now accepts a Boolean

   SolenoidButton class
      1) Event handler 'onPicked' now accepts a Boolean

   SolenoidSwitch class
      1) Event handler 'selectLatch' now accepts a Boolean

   Tape class
      1) Slot for parameters 'vertical' and 'convert' now accepts a Boolean

   TickMarks class
      1) Slot parameter 'flip' now accepts a Boolean

- Within this library, various edl files have been updated to remain consistent
  with what is a String verses, what an Identifier.  Very few changes were needed,
  one of which included specifying the slot parameter 'format' for readouts
  to be quoted (e.g., "###" vs '###').

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
ui_glut library (mixr_ui_glut)

   GlutDisplay class
      1) Slot parameters 'fullScreen', 'resizeSubwindows', accumBuff' and
         'stencilBuff' now accepts a Boolean

--------------------------------------------------------------------------------

#####################################################
Image generation oriented libraries
#####################################################

--------------------------------------------------------------------------------
ig library (mixr_ig_cigi)

   CigiModel class
      1) Internally 'federateName' is now being stored as an Identifier
      2) Slot parameter 'hideOwnshipModel' now accepts a Boolean

- The move to storing a fererate name as an Identifier caused related code
  to change to use this datatype.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
ig library (mixr_ig_pov)

--------------------------------------------------------------------------------

#####################################################
Map libraries
#####################################################

--------------------------------------------------------------------------------
rpf library (mixr_map_rpf)

   MapDrawer class
      1) Slot parameters 'drawGridMode' and 'showMap' now accepts a Boolean

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
vpf library (mixr_map_vpf)

--------------------------------------------------------------------------------


#####################################################
Models & general capabilities oriented libraries
#####################################################

--------------------------------------------------------------------------------
models library (mixr_models)

- All signature classes (IR and RF) are now grouped within the 'signatures'
  folder.  All the classes defined in previous Signatures (.hpp/.cpp) files
  have been extracted into their own class files.

   AbstractWeapon class
      1) Slot parameters 'released', 'failed', 'power', 'hang', 'hung', 'dummy',
         'jettisonable' now accepts a Boolean

   Antenna class
      1) Polarization enum is now an 'enum class' based integer
      2) Slot parameter 'polarization' now accepts an Identifier
      3) Slot parameter 'gainPatternDeg" and 'recycle' now accepts a Boolean

   Autopilot class
      1) Slot parameters 'navMode', 'altitudeHoldMode', 'velocityHoldMode',
         'holdHeading', 'loiterMode', 'loiterPatternCcwFlag', and
         'followTheLeadMode' now accepts a Boolean

   Bomb class
      1) Slot parameters 'noseFuze', 'midFuze' and 'tailFuze' now accepts
         a Boolean

   CollisionDetect class
      1) Slot parameter 'localOnly', 'useWorldCoordinates', and 'sendCrashEvents'
         now accepts a Boolean

   ExternalStore
      1) Slot paramter 'jettisonable' now accepts a Boolean

   Gimbal class
      1) Slot parameter 'type' now accepts an Identifier
      2) Enumerated type 'Type' is now an 'enum class'
      3) Enumerated type 'ServoMode' is now an 'enum class'
      4) 'ServoMode' type names have been shorten by removing the '_SERVO'
         postfix from each of them
      5) Slot parameters for 'terrainOcculting', 'checkHorizon', 'localPlayersOfInterest",
         'useWorldCoordinates', and 'ownHeadingOnly' now accepts a Boolean

   Iff class
      1) Slot parameters 'enableMode1', 'enableMode2', 'enableMode3a', 'enableMode4',
         'whichMode4', and 'enableModeC' now accepts a Boolean

   IrSensor class
      1) Slot parameter 'sensorType' now accepts an Identifier
      2) Enumerated type 'SensorType' is now an 'enum class'
      3) Slot parameter 'trackManagerName' now accepts an Identifier
      4) The name of the track manager is now stored as a std::string

   IrSystem class
      1) Slot parameter 'seekerName' now accepts an Identifier
      2) The name of the seeker stored in this class is now a std::string
      3) Slot parameter 'disableQueries' now accepts a Boolean

   Gun class
      1) Slot parameter 'unlimied' now accepts a Boolean

   Player class
      1) The enumerated list of coordinate systems is now a class (i.e.,
         'enum class CoordSys').  Also the enumeration names have been shorted
         to eliminate the 'CS_' prefix, as it's no longer needed due to
         class specification
      2) Slot parameters 'terrainElevReq', 'interpolateTerrain', 'positionFreeze',
         'altitudeFreeze', 'attitudeFreeze', 'fuelFreeze', 'crashOverride', killOverride',
         'killRemoval'' 'enableNetOutput' and 'testBodyAxis' now accepts a Boolean

   RfSensor class
      1) Slot parameter 'trackManagerName' now accepts an Identifier
      2) Internally, this class now stores the track manager name as a
         std::string. Its API has been updated to set or get its name based on
         this type
      3) Slot parameter 'syncXmitWithScan' now accepts a Boolean

   RfSystem class
      1) Slot parameter 'antennaName' now accepts an Identifier
      2) Slot parameter 'disableEmissions' now accepts a Boolean

   Route class
      1) Slot parameters 'autoSequence' and 'wrap' now accepts a Boolean

   ScanGimbal class
      1) Enumerated type 'Side' is now an 'enum class'
      2) The anonymous enumerated list of scan modes has been replaced by a
         'enum class' that defines a ScanMode
      3) Slot parameter 'scanMode' now accepts an Identifier
      4) Slot parameter 'leftToRightScan' now accept a Boolean

   SigAzEl class
      1) Slot parameters 'swapOrder', 'inDegrees' and 'inDecibel' now accepts
         a Boolean

   TargetData class
      1) Slot parameters 'enabled', 'completed' and 'manualAssign' now accepts
         a Boolean

   TrackManager class
      1) Slot parameter 'logTrackUpdates' now accepts a Boolean

   WorldModel class
      1) Slot parameter 'gamingAreaUseEarthModel' now accepts a Boolean

- Due to changes associated with 'enum's becoming full fledged 'enum class'es
  more specificity was added in other related classes that used those
  enumerated values.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
simulation library (mixr_simulation)

   AbstractPlayer class
      1) Numerical player identifier (ID) was changed to be an 'int' as opposed
         to 'unsigned short'
      2) The enumerated list of modes is now a class (i.e., 'enum class Mode').
      3) Method 'isNetworkedPlayer()' renamed to 'isProxyPlayer()'
      4) String-based players name is now a std::string
      5) Slot parameter 'mode' now accepts an Identifier

   Station class
      1) Slot parameter 'ownship' now accepts an Identifier
      2) Slot parameter 'enableUpdateTimers' now accepts a Boolean

--------------------------------------------------------------------------------

#####################################################
Interoperability oriented libraries
#####################################################

--------------------------------------------------------------------------------
interop library (mixr_interop)

   NetIO class
      1) The number of input and output Nibs and entity types has changed
         from an 'unsigned int' quantity to a simple 'int'.
      2) The methods 'testOutputEntityTypes()' and 'testInputEntityTypes()'
         that did nothing are now designated abstract.  Subclasses must
         implement.
      3) Renamed the method 'createIPlayer()' to 'createProxyPlayer()'
      4) Slot parameters for 'federationName' and 'federateName' now
         accept an Identifier
      5) Slot parameters 'enableInput', 'enableOutput' and 'enableRelay'
         now accepts a Boolean

- Due to changes related to federate and federation names being typed
  as an Identifier caused other classes to also store that information
  the same way.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
dis library (mixr_interop_dis)
--------------------------------------------------------------------------------

   EmissionPduHandler class
     1) Slot parameters 'defaultIn' and 'defaultOut' now accepts a Boolean

   Nib class
     1) Renamed the method 'updateTheIPlayer()' to 'updateProxyPlayer()'

--------------------------------------------------------------------------------
hla library (mixr_interop_hla)
--------------------------------------------------------------------------------

   NetIO class
      1) Slot parameters 'regulatingTime' and 'constrainedTime' now accepts a
         Boolean

--------------------------------------------------------------------------------
rprfom library (mixr_interop_rprfom)
--------------------------------------------------------------------------------
